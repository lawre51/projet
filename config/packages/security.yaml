security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider

            form_login:
                # Active l'authentification
                login_path: app_login
                check_path: app_login
                default_target_path: accueil

             

            logout:
                path: app_logout
                invalidate_session: false
                # where to redirect after logout
                # target: app_any_route
                target: accueil

            #json_login:
                # Active l'authentificateur qui fournit des jetons CSRF au point de terminaison
                # Ce dernier s'éxécute lorsque l'utilisateur demande le check_path 
                #check_path: api_login
            
            #http_basic:
                #Active l'authentificateur http
                #realm: Secured Area   

             # by default, the feature allows 5 login attempts per minute
            #login_throttling: null 
            # configure the maximum login attempts
            login_throttling:
                max_attempts: 2          # per minute ...
                interval: '1 minutes' # ... or in a custom period
            # use a custom rate limiter via its service ID
            #login_throttling:
                #limiter: app.my_login_rate_limiter

        secured_area:
        #Protection faille CSRF
            form_login:
                enable_csrf: true




            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_USER }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
